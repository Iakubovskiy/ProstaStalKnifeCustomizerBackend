// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20250616220159_GetKnifePriceFunctionAdded")]
    partial class GetKnifePriceFunctionAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AttachmentCompletedSheath", b =>
                {
                    b.Property<Guid>("AttachmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompletedSheathId")
                        .HasColumnType("uuid");

                    b.HasKey("AttachmentsId", "CompletedSheathId");

                    b.HasIndex("CompletedSheathId");

                    b.ToTable("AttachmentCompletedSheath");
                });

            modelBuilder.Entity("AttachmentKnife", b =>
                {
                    b.Property<Guid>("AttachmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("KnifeId")
                        .HasColumnType("uuid");

                    b.HasKey("AttachmentsId", "KnifeId");

                    b.HasIndex("KnifeId");

                    b.ToTable("AttachmentKnife");
                });

            modelBuilder.Entity("CompletedSheathEngraving", b =>
                {
                    b.Property<Guid>("CompletedSheathId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EngravingsId")
                        .HasColumnType("uuid");

                    b.HasKey("CompletedSheathId", "EngravingsId");

                    b.HasIndex("EngravingsId");

                    b.ToTable("CompletedSheathEngraving");
                });

            modelBuilder.Entity("Domain.Component.BladeCoatingColors.BladeCoatingColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("ColorMapId")
                        .HasColumnType("uuid");

                    b.Property<string>("EngravingColorCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<Guid?>("TextureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ColorMapId");

                    b.HasIndex("TextureId");

                    b.ToTable("BladeCoatingColors");
                });

            modelBuilder.Entity("Domain.Component.BladeShapes.BladeShape", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BladeShapeModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BladeShapePhotoId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<Guid?>("SheathId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BladeShapeModelId");

                    b.HasIndex("BladeShapePhotoId");

                    b.HasIndex("SheathId");

                    b.HasIndex("TypeId");

                    b.ToTable("BladeShapes");
                });

            modelBuilder.Entity("Domain.Component.BladeShapes.BladeShapeTypes.BladeShapeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BladeShapeTypes");
                });

            modelBuilder.Entity("Domain.Component.Engravings.Engraving", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Font")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("uuid");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.ToTable("Engravings");
                });

            modelBuilder.Entity("Domain.Component.Engravings.Support.EngravingPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("EngravingPrices");
                });

            modelBuilder.Entity("Domain.Component.Engravings.Support.EngravingTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("EngravingTags");
                });

            modelBuilder.Entity("Domain.Component.Handles.Handle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BladeShapeTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("ColorMapId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HandleModelId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("TextureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BladeShapeTypeId");

                    b.HasIndex("ColorMapId");

                    b.HasIndex("HandleModelId");

                    b.HasIndex("TextureId");

                    b.ToTable("Handles");
                });

            modelBuilder.Entity("Domain.Component.Product.Attachments.AttachmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AttachmentTypes");
                });

            modelBuilder.Entity("Domain.Component.Product.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Product");

                    b.HasDiscriminator().HasValue("Product");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Component.Product.ProductTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTag");
                });

            modelBuilder.Entity("Domain.Component.Sheaths.Color.SheathColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid?>("ColorMapId")
                        .HasColumnType("uuid");

                    b.Property<string>("EngravingColorCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("TextureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ColorMapId");

                    b.HasIndex("TextureId");

                    b.ToTable("SheathColors");
                });

            modelBuilder.Entity("Domain.Component.Sheaths.Color.SheathColorPriceByType", b =>
                {
                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SheathColorId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("TypeId", "SheathColorId");

                    b.HasIndex("SheathColorId");

                    b.ToTable("SheathColorPriceByType");
                });

            modelBuilder.Entity("Domain.Component.Sheaths.Sheath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("TypeId");

                    b.ToTable("Sheaths");
                });

            modelBuilder.Entity("Domain.Component.Textures.Texture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("NormalMapId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoughnessMapId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NormalMapId");

                    b.HasIndex("RoughnessMapId");

                    b.ToTable("Textures");
                });

            modelBuilder.Entity("Domain.Currencies.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Domain.Files.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FileEntity");
                });

            modelBuilder.Entity("Domain.Order.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid>("DeliveryTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Total")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryTypeId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Order.OrderItem", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Domain.Order.Support.DeliveryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("DeliveryTypes");
                });

            modelBuilder.Entity("Domain.Order.Support.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EngravingEngravingTag", b =>
                {
                    b.Property<Guid>("EngravingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("EngravingId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("Engraving_EngravingTag", (string)null);
                });

            modelBuilder.Entity("EngravingKnife", b =>
                {
                    b.Property<Guid>("EngravingsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("KnifeId")
                        .HasColumnType("uuid");

                    b.HasKey("EngravingsId", "KnifeId");

                    b.HasIndex("KnifeId");

                    b.ToTable("EngravingKnife");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Component.Product.Attachments.Attachment", b =>
                {
                    b.HasBaseType("Domain.Component.Product.Product");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasIndex("ModelId");

                    b.HasIndex("TypeId");

                    b.HasDiscriminator().HasValue("Attachment");
                });

            modelBuilder.Entity("Domain.Component.Product.CompletedSheath.CompletedSheath", b =>
                {
                    b.HasBaseType("Domain.Component.Product.Product");

                    b.Property<Guid>("SheathColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SheathId")
                        .HasColumnType("uuid");

                    b.HasIndex("SheathColorId");

                    b.HasIndex("SheathId");

                    b.ToTable("Product", t =>
                        {
                            t.Property("SheathColorId")
                                .HasColumnName("CompletedSheath_SheathColorId");

                            t.Property("SheathId")
                                .HasColumnName("CompletedSheath_SheathId");
                        });

                    b.HasDiscriminator().HasValue("CompletedSheath");
                });

            modelBuilder.Entity("Domain.Component.Product.Knife.Knife", b =>
                {
                    b.HasBaseType("Domain.Component.Product.Product");

                    b.Property<Guid>("BladeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HandleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SheathColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SheathId")
                        .HasColumnType("uuid");

                    b.HasIndex("BladeId");

                    b.HasIndex("ColorId");

                    b.HasIndex("HandleId");

                    b.HasIndex("SheathColorId");

                    b.HasIndex("SheathId");

                    b.HasDiscriminator().HasValue("Knife");
                });

            modelBuilder.Entity("Domain.Users.Admin", b =>
                {
                    b.HasBaseType("Domain.Users.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("AttachmentCompletedSheath", b =>
                {
                    b.HasOne("Domain.Component.Product.Attachments.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Component.Product.CompletedSheath.CompletedSheath", null)
                        .WithMany()
                        .HasForeignKey("CompletedSheathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentKnife", b =>
                {
                    b.HasOne("Domain.Component.Product.Attachments.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Component.Product.Knife.Knife", null)
                        .WithMany()
                        .HasForeignKey("KnifeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompletedSheathEngraving", b =>
                {
                    b.HasOne("Domain.Component.Product.CompletedSheath.CompletedSheath", null)
                        .WithMany()
                        .HasForeignKey("CompletedSheathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Component.Engravings.Engraving", null)
                        .WithMany()
                        .HasForeignKey("EngravingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Component.BladeCoatingColors.BladeCoatingColor", b =>
                {
                    b.HasOne("Domain.Files.FileEntity", "ColorMap")
                        .WithMany()
                        .HasForeignKey("ColorMapId");

                    b.HasOne("Domain.Component.Textures.Texture", "Texture")
                        .WithMany()
                        .HasForeignKey("TextureId");

                    b.OwnsOne("Domain.Translation.Translations", "Color", b1 =>
                        {
                            b1.Property<Guid>("BladeCoatingColorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("BladeCoatingColorId");

                            b1.ToTable("BladeCoatingColors");

                            b1.WithOwner()
                                .HasForeignKey("BladeCoatingColorId");
                        });

                    b.OwnsOne("Domain.Translation.Translations", "Type", b1 =>
                        {
                            b1.Property<Guid>("BladeCoatingColorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("BladeCoatingColorId");

                            b1.ToTable("BladeCoatingColors");

                            b1.WithOwner()
                                .HasForeignKey("BladeCoatingColorId");
                        });

                    b.Navigation("Color")
                        .IsRequired();

                    b.Navigation("ColorMap");

                    b.Navigation("Texture");

                    b.Navigation("Type")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Component.BladeShapes.BladeShape", b =>
                {
                    b.HasOne("Domain.Files.FileEntity", "BladeShapeModel")
                        .WithMany()
                        .HasForeignKey("BladeShapeModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Files.FileEntity", "BladeShapePhoto")
                        .WithMany()
                        .HasForeignKey("BladeShapePhotoId");

                    b.HasOne("Domain.Component.Sheaths.Sheath", "Sheath")
                        .WithMany()
                        .HasForeignKey("SheathId");

                    b.HasOne("Domain.Component.BladeShapes.BladeShapeTypes.BladeShapeType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Component.BladeShapes.BladeCharacteristic.BladeCharacteristics", "BladeCharacteristics", b1 =>
                        {
                            b1.Property<Guid>("BladeShapeId")
                                .HasColumnType("uuid");

                            b1.Property<double>("BladeLength")
                                .HasColumnType("double precision");

                            b1.Property<double>("BladeWeight")
                                .HasColumnType("double precision");

                            b1.Property<double>("BladeWidth")
                                .HasColumnType("double precision");

                            b1.Property<double>("RockwellHardnessUnits")
                                .HasColumnType("double precision");

                            b1.Property<double>("SharpeningAngle")
                                .HasColumnType("double precision");

                            b1.Property<double>("TotalLength")
                                .HasColumnType("double precision");

                            b1.HasKey("BladeShapeId");

                            b1.ToTable("BladeShapes");

                            b1.WithOwner()
                                .HasForeignKey("BladeShapeId");
                        });

                    b.OwnsOne("Domain.Translation.Translations", "Name", b1 =>
                        {
                            b1.Property<Guid>("BladeShapeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("BladeShapeId");

                            b1.ToTable("BladeShapes");

                            b1.WithOwner()
                                .HasForeignKey("BladeShapeId");
                        });

                    b.Navigation("BladeCharacteristics")
                        .IsRequired();

                    b.Navigation("BladeShapeModel");

                    b.Navigation("BladeShapePhoto");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Sheath");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Component.Engravings.Engraving", b =>
                {
                    b.HasOne("Domain.Files.FileEntity", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.OwnsOne("Domain.Translation.Translations", "Description", b1 =>
                        {
                            b1.Property<Guid>("EngravingId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("EngravingId");

                            b1.ToTable("Engravings");

                            b1.WithOwner()
                                .HasForeignKey("EngravingId");
                        });

                    b.OwnsOne("Domain.Translation.Translations", "Name", b1 =>
                        {
                            b1.Property<Guid>("EngravingId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("EngravingId");

                            b1.ToTable("Engravings");

                            b1.WithOwner()
                                .HasForeignKey("EngravingId");
                        });

                    b.OwnsOne("Domain.Component.Engravings.Parameters.EngravingPosition", "EngravingPosition", b1 =>
                        {
                            b1.Property<Guid>("EngravingId")
                                .HasColumnType("uuid");

                            b1.Property<double>("LocationX")
                                .HasColumnType("double precision");

                            b1.Property<double>("LocationY")
                                .HasColumnType("double precision");

                            b1.Property<double>("LocationZ")
                                .HasColumnType("double precision");

                            b1.HasKey("EngravingId");

                            b1.ToTable("Engravings");

                            b1.WithOwner()
                                .HasForeignKey("EngravingId");
                        });

                    b.OwnsOne("Domain.Component.Engravings.Parameters.EngravingRotation", "EngravingRotation", b1 =>
                        {
                            b1.Property<Guid>("EngravingId")
                                .HasColumnType("uuid");

                            b1.Property<double>("RotationX")
                                .HasColumnType("double precision");

                            b1.Property<double>("RotationY")
                                .HasColumnType("double precision");

                            b1.Property<double>("RotationZ")
                                .HasColumnType("double precision");

                            b1.HasKey("EngravingId");

                            b1.ToTable("Engravings");

                            b1.WithOwner()
                                .HasForeignKey("EngravingId");
                        });

                    b.OwnsOne("Domain.Component.Engravings.Parameters.EngravingScale", "EngravingScale", b1 =>
                        {
                            b1.Property<Guid>("EngravingId")
                                .HasColumnType("uuid");

                            b1.Property<double>("ScaleX")
                                .HasColumnType("double precision");

                            b1.Property<double>("ScaleY")
                                .HasColumnType("double precision");

                            b1.Property<double>("ScaleZ")
                                .HasColumnType("double precision");

                            b1.HasKey("EngravingId");

                            b1.ToTable("Engravings");

                            b1.WithOwner()
                                .HasForeignKey("EngravingId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("EngravingPosition")
                        .IsRequired();

                    b.Navigation("EngravingRotation")
                        .IsRequired();

                    b.Navigation("EngravingScale")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("Domain.Component.Engravings.Support.EngravingTag", b =>
                {
                    b.OwnsOne("Domain.Translation.Translations", "Name", b1 =>
                        {
                            b1.Property<Guid>("EngravingTagId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("EngravingTagId");

                            b1.ToTable("EngravingTags");

                            b1.WithOwner()
                                .HasForeignKey("EngravingTagId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Component.Handles.Handle", b =>
                {
                    b.HasOne("Domain.Component.BladeShapes.BladeShapeTypes.BladeShapeType", "BladeShapeType")
                        .WithMany()
                        .HasForeignKey("BladeShapeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Files.FileEntity", "ColorMap")
                        .WithMany()
                        .HasForeignKey("ColorMapId");

                    b.HasOne("Domain.Files.FileEntity", "HandleModel")
                        .WithMany()
                        .HasForeignKey("HandleModelId");

                    b.HasOne("Domain.Component.Textures.Texture", "Texture")
                        .WithMany()
                        .HasForeignKey("TextureId");

                    b.OwnsOne("Domain.Translation.Translations", "Color", b1 =>
                        {
                            b1.Property<Guid>("HandleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("HandleId");

                            b1.ToTable("Handles");

                            b1.WithOwner()
                                .HasForeignKey("HandleId");
                        });

                    b.OwnsOne("Domain.Translation.Translations", "Material", b1 =>
                        {
                            b1.Property<Guid>("HandleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("HandleId");

                            b1.ToTable("Handles");

                            b1.WithOwner()
                                .HasForeignKey("HandleId");
                        });

                    b.Navigation("BladeShapeType");

                    b.Navigation("Color")
                        .IsRequired();

                    b.Navigation("ColorMap");

                    b.Navigation("HandleModel");

                    b.Navigation("Material")
                        .IsRequired();

                    b.Navigation("Texture");
                });

            modelBuilder.Entity("Domain.Component.Product.Attachments.AttachmentType", b =>
                {
                    b.OwnsOne("Domain.Translation.Translations", "Name", b1 =>
                        {
                            b1.Property<Guid>("AttachmentTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("AttachmentTypeId");

                            b1.ToTable("AttachmentTypes");

                            b1.WithOwner()
                                .HasForeignKey("AttachmentTypeId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Component.Product.Product", b =>
                {
                    b.HasOne("Domain.Files.FileEntity", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Translation.Translations", "Description", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Domain.Translation.Translations", "MetaDescription", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Domain.Translation.Translations", "MetaTitle", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Domain.Translation.Translations", "Name", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Domain.Translation.Translations", "Title", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("MetaDescription")
                        .IsRequired();

                    b.Navigation("MetaTitle")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Component.Product.ProductTag", b =>
                {
                    b.HasOne("Domain.Component.Product.Product", null)
                        .WithMany("Tags")
                        .HasForeignKey("ProductId");

                    b.OwnsOne("Domain.Translation.Translations", "Tag", b1 =>
                        {
                            b1.Property<Guid>("ProductTagId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("ProductTagId");

                            b1.ToTable("ProductTag");

                            b1.WithOwner()
                                .HasForeignKey("ProductTagId");
                        });

                    b.Navigation("Tag")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Component.Sheaths.Color.SheathColor", b =>
                {
                    b.HasOne("Domain.Files.FileEntity", "ColorMap")
                        .WithMany()
                        .HasForeignKey("ColorMapId");

                    b.HasOne("Domain.Component.Textures.Texture", "Texture")
                        .WithMany()
                        .HasForeignKey("TextureId");

                    b.OwnsOne("Domain.Translation.Translations", "Color", b1 =>
                        {
                            b1.Property<Guid>("SheathColorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("SheathColorId");

                            b1.ToTable("SheathColors");

                            b1.WithOwner()
                                .HasForeignKey("SheathColorId");
                        });

                    b.OwnsOne("Domain.Translation.Translations", "Material", b1 =>
                        {
                            b1.Property<Guid>("SheathColorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("SheathColorId");

                            b1.ToTable("SheathColors");

                            b1.WithOwner()
                                .HasForeignKey("SheathColorId");
                        });

                    b.Navigation("Color")
                        .IsRequired();

                    b.Navigation("ColorMap");

                    b.Navigation("Material")
                        .IsRequired();

                    b.Navigation("Texture");
                });

            modelBuilder.Entity("Domain.Component.Sheaths.Color.SheathColorPriceByType", b =>
                {
                    b.HasOne("Domain.Component.Sheaths.Color.SheathColor", "SheathColor")
                        .WithMany("Prices")
                        .HasForeignKey("SheathColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Component.BladeShapes.BladeShapeTypes.BladeShapeType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SheathColor");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Component.Sheaths.Sheath", b =>
                {
                    b.HasOne("Domain.Files.FileEntity", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId");

                    b.HasOne("Domain.Component.BladeShapes.BladeShapeTypes.BladeShapeType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Translation.Translations", "Name", b1 =>
                        {
                            b1.Property<Guid>("SheathId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("SheathId");

                            b1.ToTable("Sheaths");

                            b1.WithOwner()
                                .HasForeignKey("SheathId");
                        });

                    b.Navigation("Model");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Component.Textures.Texture", b =>
                {
                    b.HasOne("Domain.Files.FileEntity", "NormalMap")
                        .WithMany()
                        .HasForeignKey("NormalMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Files.FileEntity", "RoughnessMap")
                        .WithMany()
                        .HasForeignKey("RoughnessMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NormalMap");

                    b.Navigation("RoughnessMap");
                });

            modelBuilder.Entity("Domain.Order.Order", b =>
                {
                    b.HasOne("Domain.Order.Support.DeliveryType", "DeliveryType")
                        .WithMany()
                        .HasForeignKey("DeliveryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Order.Support.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Order.Support.ClientData", "ClientData", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("character varying(70)");

                            b1.Property<string>("ClientFullName")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)");

                            b1.Property<string>("ClientPhoneNumber")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("CountryForDelivery")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("character varying(70)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("ClientData")
                        .IsRequired();

                    b.Navigation("DeliveryType");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.Order.OrderItem", b =>
                {
                    b.HasOne("Domain.Order.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Component.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Order.Support.DeliveryType", b =>
                {
                    b.OwnsOne("Domain.Translation.Translations", "Comment", b1 =>
                        {
                            b1.Property<Guid>("DeliveryTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("DeliveryTypeId");

                            b1.ToTable("DeliveryTypes");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryTypeId");
                        });

                    b.OwnsOne("Domain.Translation.Translations", "Name", b1 =>
                        {
                            b1.Property<Guid>("DeliveryTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("DeliveryTypeId");

                            b1.ToTable("DeliveryTypes");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryTypeId");
                        });

                    b.Navigation("Comment");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Order.Support.PaymentMethod", b =>
                {
                    b.OwnsOne("Domain.Translation.Translations", "Description", b1 =>
                        {
                            b1.Property<Guid>("PaymentMethodId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("PaymentMethodId");

                            b1.ToTable("PaymentMethods");

                            b1.WithOwner()
                                .HasForeignKey("PaymentMethodId");
                        });

                    b.OwnsOne("Domain.Translation.Translations", "Name", b1 =>
                        {
                            b1.Property<Guid>("PaymentMethodId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("PaymentMethodId");

                            b1.ToTable("PaymentMethods");

                            b1.WithOwner()
                                .HasForeignKey("PaymentMethodId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.OwnsOne("Domain.Order.Support.ClientData", "UserData", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("character varying(70)");

                            b1.Property<string>("ClientFullName")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)");

                            b1.Property<string>("ClientPhoneNumber")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("CountryForDelivery")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("character varying(70)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("EngravingEngravingTag", b =>
                {
                    b.HasOne("Domain.Component.Engravings.Engraving", null)
                        .WithMany()
                        .HasForeignKey("EngravingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Component.Engravings.Support.EngravingTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EngravingKnife", b =>
                {
                    b.HasOne("Domain.Component.Engravings.Engraving", null)
                        .WithMany()
                        .HasForeignKey("EngravingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Component.Product.Knife.Knife", null)
                        .WithMany()
                        .HasForeignKey("KnifeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Component.Product.Attachments.Attachment", b =>
                {
                    b.HasOne("Domain.Files.FileEntity", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Component.Product.Attachments.AttachmentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Translation.Translations", "Color", b1 =>
                        {
                            b1.Property<Guid>("AttachmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("AttachmentId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("AttachmentId");
                        });

                    b.OwnsOne("Domain.Translation.Translations", "Material", b1 =>
                        {
                            b1.Property<Guid>("AttachmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TranslationDictionary")
                                .IsRequired()
                                .HasColumnType("jsonb");

                            b1.HasKey("AttachmentId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("AttachmentId");
                        });

                    b.Navigation("Color")
                        .IsRequired();

                    b.Navigation("Material")
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Component.Product.CompletedSheath.CompletedSheath", b =>
                {
                    b.HasOne("Domain.Component.Sheaths.Color.SheathColor", "SheathColor")
                        .WithMany()
                        .HasForeignKey("SheathColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Component.Sheaths.Sheath", "Sheath")
                        .WithMany()
                        .HasForeignKey("SheathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sheath");

                    b.Navigation("SheathColor");
                });

            modelBuilder.Entity("Domain.Component.Product.Knife.Knife", b =>
                {
                    b.HasOne("Domain.Component.BladeShapes.BladeShape", "Blade")
                        .WithMany()
                        .HasForeignKey("BladeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Component.BladeCoatingColors.BladeCoatingColor", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Component.Handles.Handle", "Handle")
                        .WithMany()
                        .HasForeignKey("HandleId");

                    b.HasOne("Domain.Component.Sheaths.Color.SheathColor", "SheathColor")
                        .WithMany()
                        .HasForeignKey("SheathColorId");

                    b.HasOne("Domain.Component.Sheaths.Sheath", "Sheath")
                        .WithMany()
                        .HasForeignKey("SheathId");

                    b.Navigation("Blade");

                    b.Navigation("Color");

                    b.Navigation("Handle");

                    b.Navigation("Sheath");

                    b.Navigation("SheathColor");
                });

            modelBuilder.Entity("Domain.Component.Product.Product", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Domain.Component.Sheaths.Color.SheathColor", b =>
                {
                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
